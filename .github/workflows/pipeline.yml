name: Pipeline [test -> build -> deploy]
on:
  push:
    branches:
      - '**'
  workflow_dispatch:
    inputs:
      only_pacts:
        description: 'Run only the Pact workflow'
        required: false
        default: 'false'
      pact_consumer_tags:
        description: 'Pact consumer tags'
        required: false
        default: 'main'
permissions:
  contents: read
  packages: write
env:
  POSTGRES_DB: interventions_ci
  POSTGRES_PASSWORD: password
  ALERTS_SLACK_CHANNEL: interventions-dev-notifications
  RELEASES_SLACK_CHANNEL: refer-and-monitor-an-intervention
concurrency:
  group: ${{ github.workflow }}-${{ github.ref == 'refs/heads/main' && github.sha || github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}
jobs:
  validate:
    name: Validate
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Java
        uses: actions/setup-java@v5
        with:
          distribution: temurin
          java-version: 21
      - name: Setup Flyway and PostgreSQL client
        run: |
          sudo apt-get update -y
          sudo apt-get install -y postgresql-client graphviz curl
          wget -qO- https://repo1.maven.org/maven2/org/flywaydb/flyway-commandline/10.15.2/flyway-commandline-10.15.2-linux-x64.tar.gz | tar xvz
          sudo ln -s `pwd`/flyway-10.15.2/flyway /usr/local/bin
      - name: Wait for Postgres
        run: |
          until pg_isready -h localhost -p 5432 -U postgres; do
            echo "Waiting for Postgres..."
            sleep 5
          done
      - name: Run migrations and local seeds
        run: |
          flyway -cleanDisabled="false" clean \
            -url="jdbc:postgresql://localhost:5432/${POSTGRES_DB}" \
            -user="postgres" \
            -password="${POSTGRES_PASSWORD}"
          flyway migrate \
            -url="jdbc:postgresql://localhost:5432/${POSTGRES_DB}" \
            -user="postgres" \
            -password="${POSTGRES_PASSWORD}" \
            -locations="src/main/resources/db/migration,src/main/resources/db/local" \
            -postgresql.transactional.lock=false
      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/build.gradle*', '**/gradle-wrapper.properties', '**/build.gradle.kts') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Run Gradle checks
        run: ./gradlew check jacocoTestCoverageVerification --no-daemon -Dspring.datasource.url=jdbc:postgresql://localhost:5432/${POSTGRES_DB}
      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: Test results validate
          path: build/test-results
      - name: Upload test reports
        uses: actions/upload-artifact@v4
        with:
          name: Test reports validate
          path: |
            build/reports/tests
            build/reports/jacoco/test
  validate_db:
    name: Validate DB
    runs-on: ubuntu-latest
    needs: validate
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    env:
      POSTGRES_DB: interventions_ci
      POSTGRES_PASSWORD: password
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Java
        uses: actions/setup-java@v5
        with:
          distribution: 'temurin'
          java-version: '21'
      - name: Setup Flyway and PostgreSQL client
        run: |
          wget -qO- https://repo1.maven.org/maven2/org/flywaydb/flyway-commandline/10.15.2/flyway-commandline-10.15.2-linux-x64.tar.gz | tar xvz
          sudo ln -s `pwd`/flyway-10.15.2/flyway /usr/local/bin
          sudo apt-get update -y
          sudo apt-get install -y postgresql-client
      - name: Wait for Postgres to be ready
        run: |
          until pg_isready -h localhost -p 5432 -U postgres; do
            echo "Waiting for Postgres..."
            sleep 5
          done
      - name: Run main migrations then branch migrations to detect clashes
        env:
          GIT_FETCH_DEPTH: 0
        run: |
          flyway -cleanDisabled="false" clean \
            -url="jdbc:postgresql://localhost:5432/${POSTGRES_DB}" \
            -user="postgres" \
            -password="${POSTGRES_PASSWORD}"
          git fetch --unshallow || true
          git fetch origin main
          git reset --hard origin/main
          flyway migrate \
            -url="jdbc:postgresql://localhost:5432/${POSTGRES_DB}" \
            -user="postgres" \
            -password="${POSTGRES_PASSWORD}" \
            -locations="src/main/resources/db/migration" \
            -postgresql.transactional.lock=false
          git reset --hard "${{ github.sha }}"
          flyway migrate \
            -url="jdbc:postgresql://localhost:5432/${POSTGRES_DB}" \
            -user="postgres" \
            -password="${POSTGRES_PASSWORD}" \
            -locations="src/main/resources/db/migration" \
            -postgresql.transactional.lock=false
      - name: Run migrations and local seeds (final check)
        run: |
          flyway -cleanDisabled="false" clean \
            -url="jdbc:postgresql://localhost:5432/${POSTGRES_DB}" \
            -user="postgres" \
            -password="${POSTGRES_PASSWORD}"
          flyway migrate \
            -url="jdbc:postgresql://localhost:5432/${POSTGRES_DB}" \
            -user="postgres" \
            -password="${POSTGRES_PASSWORD}" \
            -locations="src/main/resources/db/migration,src/main/resources/db/local" \
            -postgresql.transactional.lock=false
      - name: Validate metadata
        run: |
          PGPASSWORD="${POSTGRES_PASSWORD}" bash script/validate-metadata.sh
  publish_data:
    name: Publish data
    runs-on: ubuntu-latest
    needs:
      - validate
      - validate_db
      - set_version
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    env:
      POSTGRES_DB: interventions_ci
      POSTGRES_PASSWORD: password
      APP_VERSION: ${{ needs.set_version.outputs.app_version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup Flyway and PostgreSQL client
        run: |
          wget -qO- https://repo1.maven.org/maven2/org/flywaydb/flyway-commandline/10.15.2/flyway-commandline-10.15.2-linux-x64.tar.gz | tar xvz
          sudo ln -s `pwd`/flyway-10.15.2/flyway /usr/local/bin
          sudo apt-get update -y
          sudo apt-get install -y postgresql-client graphviz
      - name: Wait for PostgreSQL to be ready
        run: |
          until pg_isready -h localhost -p 5432 -U postgres; do
            echo "Waiting for PostgreSQL..."
            sleep 5
          done
      - name: Migrate the database
        run: |
          flyway migrate \
            -url="jdbc:postgresql://localhost:5432/${POSTGRES_DB}" \
            -user="postgres" \
            -password="${POSTGRES_PASSWORD}" \
            -locations="src/main/resources/db/migration" \
            -postgresql.transactional.lock=false
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build data dictionary
        run: |
          script/build-data-dictionary.sh
      - name: Tag data dictionary images
        run: |
          docker tag data-dictionary ghcr.io/${{ github.repository }}:data-dictionary-${APP_VERSION}
          if [ "${GITHUB_REF}" = "refs/heads/main" ]; then
            docker tag data-dictionary ghcr.io/${{ github.repository }}:data-dictionary-latest
          fi
      - name: Login to GHCR
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      - name: Push data dictionary images
        if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/hotfix/')
        run: |
          docker push ghcr.io/${{ github.repository }}:data-dictionary-${APP_VERSION}
          if [ "${GITHUB_REF}" = "refs/heads/main" ]; then
            docker push ghcr.io/${{ github.repository }}:data-dictionary-latest
          fi
  pact_check_and_publish:
    name: Pact check and publish
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: validate
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    env:
      PACTBROKER_BASE: "https://pact-broker-prod.apps.live-1.cloud-platform.service.justice.gov.uk"
      PACTBROKER_AUTH_USERNAME: interventions
      PACTBROKER_AUTH_PASSWORD: ${{ secrets.PACT_BROKER_PASSWORD }}
      _JAVA_OPTIONS: -Xmx512m -XX:ParallelGCThreads=2 -XX:ConcGCThreads=2 -Djava.util.concurrent.ForkJoinPool.common.parallelism=2 -Dorg.gradle.daemon=false -Dkotlin.compiler.execution.strategy=in-process
    outputs:
      pact_version: ${{ steps.set_pact_version.outputs.pact_version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Java
        uses: actions/setup-java@v5
        with:
          distribution: temurin
          java-version: 21
      - name: Setup Flyway and PostgreSQL client
        run: |
          sudo apt-get update -y
          sudo apt-get install -y postgresql-client
          wget -qO- https://repo1.maven.org/maven2/org/flywaydb/flyway-commandline/10.15.2/flyway-commandline-10.15.2-linux-x64.tar.gz | tar xvz
          sudo ln -s `pwd`/flyway-10.15.2/flyway /usr/local/bin
      - name: Wait for Postgres to be ready
        run: |
          until pg_isready -h localhost -p 5432 -U postgres; do
            echo "Waiting for Postgres..."
            sleep 5
          done
      - name: Run migrations and local seeds
        run: |
          flyway -cleanDisabled="false" clean \
            -url="jdbc:postgresql://localhost:5432/${POSTGRES_DB}" \
            -user="postgres" \
            -password="${POSTGRES_PASSWORD}"
          flyway migrate \
            -url="jdbc:postgresql://localhost:5432/${POSTGRES_DB}" \
            -user="postgres" \
            -password="${POSTGRES_PASSWORD}" \
            -locations="src/main/resources/db/migration,src/main/resources/db/local" \
            -postgresql.transactional.lock=false
      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/build.gradle*', '**/gradle-wrapper.properties', '**/build.gradle.kts') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Run Pact publish (Gradle)
        id: set_pact_version
        env:
          GITHUB_SHA: ${{ github.sha }}
          GITHUB_REF_NAME: ${{ github.ref_name }}
          PACTBROKER_AUTH_PASSWORD: ${{ secrets.PACT_BROKER_PASSWORD }}
        run: |
          ./gradlew pactTestPublish -Ppact.consumer.version=${GITHUB_SHA} -PpactBrokerTags=${GITHUB_REF_NAME} -Pversion=${GITHUB_SHA}
          echo "pact_version=${GITHUB_SHA}" >> $GITHUB_OUTPUT
      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: Test results pact
          path: build/test-results
      - name: Upload Pact reports
        uses: actions/upload-artifact@v4
        with:
          name: Pact reports
          path: build/reports/tests
  helm_lint:
    strategy:
      matrix:
        environments: ['dev', 'preprod', 'prod']
    name: Helm lint
    uses: ministryofjustice/hmpps-github-actions/.github/workflows/test_helm_lint.yml@v2
    secrets: inherit
    with:
      environment: ${{ matrix.environments }}
  prepare_build:
    name: Prepare Docker build
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/hotfix/')
    needs:
      - validate
      - validate_db
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Confirm Dockerfile presence
        run: |
          echo "Verifying Dockerfile..."
          if [ ! -f ./Dockerfile ]; then
            echo "Dockerfile not found at repo root!"
            exit 1
          else
            echo "Dockerfile found."
          fi
  build:
    name: Build Docker image
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/hotfix/')
    needs: prepare_build
    uses: ministryofjustice/hmpps-github-actions/.github/workflows/docker_build.yml@v2
    with:
      docker_registry: 'ghcr.io'
      registry_org: 'ministryofjustice'
      push: false
      upload_image_artifact: true
      docker_multiplatform: false
  debug_build:
    name: Debug Docker build output
    runs-on: ubuntu-latest
    needs: build
    if: always()
    steps:
      - name: List workspace contents
        run: ls -R ${{ github.workspace }} || true
      - name: List runner temp folder
        run: ls -R ${{ runner.temp }} || true
      - name: Show available Docker images
        run: docker images || true
      - name: Download build_image artifact from reusable workflow
        uses: actions/download-artifact@v4
        with:
          name: build_image
          path: ${{ runner.temp }}
        continue-on-error: true
      - name: Show artifact contents
        run: |
          echo "== Artifact contents =="
          ls -lh ${{ runner.temp }} || echo "No artifact downloaded"
      - name: Check for Docker tarball
        run: |
          if [ -f ${{ runner.temp }}/build_image.tar ]; then
            echo "build_image.tar found!"
            docker load -i ${{ runner.temp }}/build_image.tar
            echo "Docker image loaded successfully."
          else
            echo "build_image.tar not found!"
          fi
  set_version:
    name: Set app version
    needs: build
    runs-on: ubuntu-latest
    outputs:
      app_version: ${{ steps.determine_version.outputs.app_version }}
    steps:
      - uses: actions/checkout@v4
      - id: determine_version
        run: |
          APP_VERSION=$(git rev-parse --short HEAD)
          echo "app_version=$APP_VERSION" >> $GITHUB_OUTPUT
  check_image_artifact:
    name: Verify Docker image artifact
    runs-on: ubuntu-latest
    needs:
      - debug_build
    if: success() && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/hotfix/'))
    steps:
      - name: List Docker images on runner
        run: docker images || true
      - name: Verify Docker tarball exists
        run: |
          if [ ! -f ${{ runner.temp }}/build_image.tar ]; then
            echo "build_image.tar does not exist!"
            exit 1
          else
            echo "build_image.tar found!"
          fi
  publish:
    name: Publish Docker image
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/hotfix/')
    needs:
      - helm_lint
      - check_image_artifact
      - set_version
    uses: ministryofjustice/hmpps-github-actions/.github/workflows/docker_push.yml@v2
    secrets: inherit
    with:
      docker_registry: 'ghcr.io'
      registry_org: 'ministryofjustice'
      app_version: ${{ needs.set_version.outputs.app_version }}
      tag_latest: true
  deploy_dev:
    name: Deploy to Dev
    if: github.ref == 'refs/heads/main'
    needs:
      - build
      - set_version
      - helm_lint
      - publish_data
    uses: ministryofjustice/hmpps-github-actions/.github/workflows/deploy_env.yml@v2
    secrets: inherit
    with:
      environment: 'dev'
      app_version: ${{ needs.set_version.outputs.app_version }}
  deploy_preprod:
    name: Deploy to Preprod
    needs:
      - build
      - set_version
      - helm_lint
      - deploy_dev
    uses: ministryofjustice/hmpps-github-actions/.github/workflows/deploy_env.yml@v2
    secrets: inherit
    with:
      environment: 'preprod'
      app_version: ${{ needs.set_version.outputs.app_version }}
  deploy_prod:
    name: Deploy to Prod
    needs:
      - build
      - set_version
      - helm_lint
      - deploy_preprod
    uses: ministryofjustice/hmpps-github-actions/.github/workflows/deploy_env.yml@v2
    secrets: inherit
    with:
      environment: 'prod'
      app_version: ${{ needs.set_version.outputs.app_version }}
  tag_pact_versions:
    name: Tag Pact versions across environments
    runs-on: ubuntu-latest
    needs:
      - pact_check_and_publish
      - deploy_dev
      - deploy_preprod
      - deploy_prod
    strategy:
      matrix:
        environment:
        - dev
        - preprod
        - prod
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v6
        with:
          node-version: 20
      - name: Tag contract version with deployment
        env:
          PACT_BROKER_BASE_URL: "https://pact-broker-prod.apps.live-1.cloud-platform.service.justice.gov.uk"
          PACT_BROKER_USERNAME: interventions
          PACT_BROKER_PASSWORD: ${{ secrets.PACT_BROKER_PASSWORD }}
          PACTICIPANT: "Interventions Service"
          VERSION: ${{ needs.pact_check_and_publish.outputs.pact_version }}
          TAG: "deployed:${{ matrix.environment }}"
        run: |
          echo "Tagging Pact version ${VERSION} for environment: ${TAG}"
          npx --package='@pact-foundation/pact-node' pact-broker create-version-tag \
            --pacticipant="${PACTICIPANT}" \
            --version="${VERSION}" \
            --tag="${TAG}" \
            --broker-base-url="${PACT_BROKER_BASE_URL}" \
            --broker-username="${PACT_BROKER_USERNAME}" \
            --broker-password="${PACT_BROKER_PASSWORD}"

